What is Kiroku?
---------------

Kiroku is a tool written in Python for creating and build a fully static blog or
web page. That means, no server side language, framework,
*mod_python*/*mod_wsgi* is needed. To serve such generated content pure web
server is more than enough.

Some highlights:

* Almost no external dependencies (only `docutils`_ is required)
* Works with Python 3
* Modifiable templates
* Simple search
* Generated RSS channel
* i18n aware
* Configurable via ``ini`` file

Kiroku (喜六, in the meaning of putting something into the record; writing
something) name was chosen for this project before I realized, that there
already are software projects with the same name. Most of them are inactive, so
I decided to keep that name.

Requirements
------------

Besides (obviously) Python 3, there is only one dependency - `docutils`_,
however, if there'll be a lot of program listings to be published, than it may
be a good idea to consider installing another one - `pygments`_, which
*automagically* enables syntax highlight in code blocks.

Installation
------------

#. Install globally

   .. code:: shell-session

      root@localhost # pip install kiroku

#. Virtualenv is one option

   .. code:: shell-session

      user@localhost $ virtualenv-python3.2 blog
      New python executable in py3/bin/python3.2
      Also creating executable in py3/bin/python
      Installing distribute...done.
      Installing pip...done.
      user@localhost $ cd blog
      user@localhost blog $ . bin/activate
      (blog)user@localhost blog $ pip install kiroku

#. Also, it can be download and used directly:

   .. code:: shell-session

      user@localhost $ git clone https://bitbucket.org/gryf/kiroku.git
      user@localhost $ cd kiroku
      user@localhost kiroku $ ./kiroku.py --help

Usage
-----

Once installed, ``kiroku`` command should be available, and can be used for
building the structure of the blog or web side:

   .. code:: shell-session

      user@localhost $ kiroku init blog

This command will create default directory structure, under which several items
will be available:


Articles/pages
--------------

Every article, which should be taken into considerations should be placed in
``articles`` directory. Images should be placed in a subdirectory (``images``,
``img``, ``graphics``, ``res`` are the common choices). Files can be named in
any convention, but in two conditions: they must have ``.rst`` extension, and
they have to be on the root of the ``articles`` directory. Kiroku will not scan
that directory recursively. Articles can have date prefix, just to have them
chronologically sorted, for example ``2001-12-17_foo.rst``.

There is one special article file which is treated differently - ``about.rst``.
It doesn't have any fields mentioned below; they will not be processed. As the
name suggest, this is *About me* page.

Each page is a simple reST document. There are two modifications, that are
implemented in the kiroku module, which *make difference* from ordinary reST
document:

#. ``More`` comment.

   If the author place the comment ``.. more`` in the article, it will inform
   the Kiroku, where to cut the page and place the first part (a summary of the
   article, perhaps) of it on the index page, archive, description fields on RSS
   and so on. Example:

   .. code:: rest

       Hendrerit sem, eu tempor nisi felis et metus. Etiam gravida sem ut mi.

       .. more

       Vivamus lacus libero, aliquam eget, iaculis quis, tristique adipiscing,
       diam.  Vivamus nec massa non justo iaculis pellentesque. Aenean accumsan
       elit sit amet nibh feugiat semper.

   That will make only first line to appear on the front page.

   Placing it on the page is not mandatory, so there is no point to
   do it on short articles, but it is a good idea to put it on the huge
   articles, since several huge articles on the front page can annoy readers.

   This idea was taken from blogger platform, but I think, that I saw that on
   other blog platforms too.

#. Special fields

   `Fields`_ are special elements, which may (or may not) be present on the
   document itself, but their role is rather to describe reST document, than
   make significant appearance on that document itself.

   Kiroku use three fields, which will be utilized to describe an article:

   - ``:Title:`` - Field should contain the title of the article. If leaved
     empty, it will be guessed from the file name.
   - ``:Datetime:`` - Creation date. If not provided it will inherit the value
     from article file creation time. Format, as described on `datetime module`_
     is as follows:

        .. code:: python

            "%Y-%m-%d %H:%M:%S"
            # for example:
            "2000-01-24 17:33:31"

   - ``:Tags:`` - Comma separated labels for the article. Of course, can be
     unset.

   All of those fields are optional but it's highly recommended to have them on
   the articles.

If `pygments`_ module is present in the system, syntax highlighting for the code
blocks can be enabled. It is enough to put the appropriate language for such
block, for example::

   .. code:: python

      print("hi")

It will produce:

   .. code:: python

      print("hi")


Configuration
-------------


.. _docutils: http://docutils.sourceforge.net
.. _pygments: http://pygments.org
.. _fields: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists
.. _datetime module: http://docs.python.org/3/library/datetime.html#strftime-strptime-behavior
